/* -------------------------------------------------------------------------- *
 * Ancienne méthode utilisée pour créer les courbes de couple et de puissance *
 * Cette méthode se basait sur les rpm moteur et non ceux du rouleau ...      *
 * -------------------------------------------------------------------------- */
void MainWindow::createCoupleAndPowerCurves(
        QString const& megasquirtCSVFilename)
{
    QCSVParser MSFile(megasquirtCSVFilename, ';', QString::KeepEmptyParts);
    QCSVColumn times = MSFile["times"];
    QCSVColumn rpm   = MSFile["rpm"];

    QVector<QPointF> couplePoints;
    QVector<QPointF> powerPoints;

    double w1, w2, wIntermediate;
    double accAngulaire;
    double couple, puissance;
    const double PI = 3.141592653589793;
    const double Jdelta = 0.22; // FIXME : demander à l'utilisateur de rentrer la valeur

    int lastDataIndice(0); // Used for futur data filtering.

    w2 = (PI * rpm.at(0).toDouble()) / 30;

    for (int i(1); i < times.count(); ++i)
    {
        w1 = w2;

    /* ---------------------------------------------------------------------- *
     *                           ωx = (π * Nx) / 30                           *
     * ---------------------------------------------------------------------- *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * Π  = Pi, constante qui vaut 3.141592653589793...                       *
     * Nx = tours par minute à l'instant x == RPM (tours/minute)              *
     * ---------------------------------------------------------------------- */

        w2 = (PI * rpm.at(i).toDouble()) / 30;

        qDebug() << "w1 = " << w1;
        qDebug() << "w2 = " << w2;

    /* ---------------------------------------------------------------------- *
     *                        α = (ω2 - ω1) / (t2 - t1)                       *
     * ---------------------------------------------------------------------- *
     * α  = Accélération angulaire (rad/s²)                                   *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * tx = temps x (s)                                                       *
     * ---------------------------------------------------------------------- */

        accAngulaire =                    (w2 - w1)
                                              /
     ((times.at(i).toDouble() - times.at(lastDataIndice).toDouble()) / 1000000);
        // times values are microseconds

        qDebug() << "t2 = " << times.at(i).toDouble() << " microsecondes";
        qDebug() << "t1 = " << times.at(lastDataIndice).toDouble() << " microsecondes";
        qDebug() << "Δt (t2 - t1) = " << ((times.at(i).toDouble() - times.at(lastDataIndice).toDouble()) / 1000000);
        qDebug() << "α = " << accAngulaire;

    /* ---------------------------------------------------------------------- *
     *                              C = JΔ * α                                *
     * ---------------------------------------------------------------------- *
     * C  = Couple (N.m)                                                      *
     * JΔ = moment d'inertie (kg.m²)                                          *
     * α  = Accélération angulaire (rad/s²)                                   *
     * ---------------------------------------------------------------------- */

        couple = Jdelta * accAngulaire;

        // Ajout du point à la liste des points de la courbe du couple
        couplePoints.append(QPointF(rpm.at(i).toDouble(), couple));
        qDebug() << "couple (rpm, couple) = " << couplePoints.last();

    /* ---------------------------------------------------------------------- *
     *                        P = C * ((ω1 + ω2) / 2)                         *
     * ---------------------------------------------------------------------- *
     * P  = Puissance (Watts)                                                 *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * ---------------------------------------------------------------------- */

        wIntermediate = (w1 + w2) / 2;
        qDebug() << "(w1 + w2) / 2 = " << wIntermediate;

        puissance = couple * wIntermediate;

    /* ---------------------------------------------------------------------- *
     *               ωx = (π * Nx) / 30  <=> Nx = (30 * ωx) / π               *
     * ---------------------------------------------------------------------- *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * Π  = Pi, constante qui vaut 3.141592653589793...                       *
     * Nx = tours par minute à l'instant x == RPM (tours/minute)              *
     * ---------------------------------------------------------------------- */
        powerPoints.append(QPointF((30 * wIntermediate) / PI, puissance));
        qDebug() << "puissance (rpm, puissance) = " << powerPoints.last();

        lastDataIndice = i;
    }

    // Création de la courbe du couple
    QwtPointSeriesData* coupleSerieData = new QwtPointSeriesData(couplePoints);
    PlotCurve* coupleCurve = new PlotCurve(tr("Couple"), QPen(Qt::darkRed)); // TODO : ajouter le nom de l'essai (par défaut, le nom du dossier)
    coupleCurve->setData(coupleSerieData);
    coupleCurve->attach(this->couplePowerPlot);
    this->setPlotCurveVisibile(coupleCurve, true);

    // Création de la courbe de la puissance
    QwtPointSeriesData* powerSerieData = new QwtPointSeriesData(powerPoints);
    PlotCurve* powerCurve = new PlotCurve(tr("Puissance"), QPen(Qt::darkBlue)); // TODO : ajouter le nom de l'essai (par défaut, le nom du dossier)
    powerCurve->setData(powerSerieData);
    powerCurve->setAxes(Plot::xBottom, Plot::yRight);
    powerCurve->attach(this->couplePowerPlot);
    this->setPlotCurveVisibile(powerCurve, true);

    qDebug() << "Fin de la création des courbes ...";
}

/* -------------------------------------------------------------------------- *
 * Ancienne méthode utilisée pour créer une courbe de tendance d'ordre n      *
 * mais utilisait le version C de la fonction polynomialfit --> j'ai          *
 * créé une version C++ - Qt de cette meme fonction                           *
 * -------------------------------------------------------------------------- */
void MainWindow::createPolynomialTrendline(void)
{
    // if no curve associated to the legend item. This shouldn't happen!
    if (this->curveAssociatedToLegendItem == NULL)
        return;

    bool ok(false);
    int degree = QInputDialog::getInt(
                this, tr("Courbe de tendance polynomiale"),
                tr("Ordre de complexité ?"), 2, 2, 100, 1, &ok);

    if (!ok) // User canceled
        return;

    // Récupération de la liste des points de la courbe
    QwtSeriesData<QPointF>* serie = this->curveAssociatedToLegendItem->data();
    if (!serie)
        return;

    int size(serie->size());
    double x[size];
    double y[size];
    double coefficient[degree];

    // Récupération des coordonnées
    for(int i(0); i < size; ++i)
    {
        x[i] = serie->sample(i).x();
        y[i] = serie->sample(i).y();
    }

    // Recherche de tous les coefficients de l'équation
    polynomialfit(size, degree, x, y, coefficient);

    // Creation de la liste des points de la courbe
    QVector<QPointF> trendlinePoints;
    for(int i(0); i < size; ++i)
    {
        // Calcule les nouvelles valeurs de y
        double y(0);
        for(int j(0); j < degree; ++j)
            y += coefficient[j] * qPow(x[i], j);

        trendlinePoints.append(QPointF(x[i], y));
    }

    // Création de la courbe
    QwtPointSeriesData* trendlineSeriesData = new QwtPointSeriesData(trendlinePoints);
    PlotCurve* trendlineCurve = new PlotCurve(
                this->curveAssociatedToLegendItem->title().text() +
                tr(" Poly(") + QString::number(degree) + ")", QPen("lightskyblue"));
    trendlineCurve->setAxes(this->curveAssociatedToLegendItem->xAxis(),
                            this->curveAssociatedToLegendItem->yAxis());
    trendlineCurve->setData(trendlineSeriesData);
    trendlineCurve->attach(this->curveAssociatedToLegendItem->plot());
    this->setPlotCurveVisibile(trendlineCurve, true);
}

/* -------------------------------------------------------------------------- *
 *        Calcul de l'approximation polynomiale d'ordre 3 manuellement        *
 * -------------------------------------------------------------------------- */
void MainWindow::leastSqrRegression(
        const QVector<QPointF> &points, QString const& baseName,
        QwtPlot::Axis xAxis, QwtPlot::Axis yAxis)
{
   if (points.count() == 0)
   {
       qDebug() << "Aucune données à traiter";
       return;
   }

   // double  = 8  octets = 64  bits
   // decimal = 16 octets = 128 bits

   double SUMx4(0);  // sum of x^4
   double SUMx3(0);  // sum of x³
   double SUMx2(0);  // sum of x²
   double SUMx(0);   // sum of x
   double SUMx2y(0); // sum of x²*y
   double SUMxy(0);  // sum of x*y
   double SUMy(0);   // sum of y

   double a(0);
   double b(0);
   double c(0);

   // y = ax² + bx + c

   foreach (QPointF point, points)
   {
//       if (point.y() < 0.0)
//           continue;
       SUMx4  += qPow(point.x(), 4);
       SUMx3  += qPow(point.x(), 3);
       SUMx2  += qPow(point.x(), 2);
       SUMx   += point.x();
       SUMx2y += qPow(point.x(), 2) * point.y();
       SUMxy  += point.x() * point.y();
       SUMy   += point.y();
   }

   qDebug() << "x4 = " << SUMx4;
   qDebug() << "x3 = " << SUMx3;
   qDebug() << "x2 = " << SUMx2;
   qDebug() << "x = " << SUMx;
   qDebug() << "x²*y = " << SUMx2y;
   qDebug() << "x*y = " << SUMxy;
   qDebug() << "y = " << SUMy;

   a = ((points.count()*SUMx2y-SUMx2*SUMy)*(points.count()*SUMx2-qPow(SUMx, 2))
        -(points.count()*SUMxy-SUMx*SUMy) *(points.count()*SUMx3-SUMx2*SUMx))
                                          /
    ((points.count()*SUMx4-qPow(SUMx2, 2))*(points.count()*SUMx2-qPow(SUMx, 2))
     -qPow(SUMx2*SUMx-points.count()*SUMx3, 2));
   qDebug() << "a = " << a;

   b = (a*(SUMx2*SUMx-points.count()*SUMx3)+points.count()*SUMxy-SUMx*SUMy)
           / (points.count()*SUMx2-qPow(SUMx, 2));
   qDebug() << "b = " << b;

   c = (-a*SUMx2-b*SUMx+SUMy)/points.count();
   qDebug() << "c = " << c;

   QVector<QPointF> approxiPoints;
   foreach (QPointF point, points)
   {
       // y = a*x² + b*x + c
       approxiPoints.append(QPointF(point.x(), a*qPow(point.x(), 2) + b*point.x() + c));
   }

   // Création de la courbe
   QwtPointSeriesData* approxiSerieData = new QwtPointSeriesData(approxiPoints);
   PlotCurve* approxiCurve = new PlotCurve(tr("approxi ") + baseName, QPen(Qt::darkMagenta)); // TODO : ajouter le nom de l'essai (par défaut, le nom du dossier)
   approxiCurve->setAxes(xAxis, yAxis);
   approxiCurve->setData(approxiSerieData);
   approxiCurve->attach(this->couplePowerPlot);
   this->setPlotCurveVisibile(approxiCurve, true);
}

void MainWindow::createCoupleAndPowerCurves(const QString& inertieCSVFilename,
                                            const QString& msCSVFilename)
{
    // Open inertie file that contains time values
    QFile inertieFile(inertieCSVFilename);
    if (!inertieFile.open(QIODevice::ReadOnly | QIODevice::Text))
        throw QException(QObject::tr("Impossible d'ouvrir le fichier ")
                         + inertieCSVFilename);

    // Read the file line-by-line and covert time value into seconds
    QList<double> inertieTimes;
    while(!inertieFile.atEnd())
        inertieTimes.append(QString(inertieFile.readLine()).toDouble() / 1000000);
    inertieFile.close();

    // Remove wrong values (first ones)
    for (int i(0); i < 3; ++i)
        inertieTimes.pop_front();

    // We need at least 3 values of time to calculate the couple
    if (inertieTimes.count() < 3)
        throw QException(QObject::tr("Le fichier ") + inertieCSVFilename +
                         QObject::tr(" ne contient pas assez de valeurs"));

    // Create couple and power curves
    const double PI = 3.14159265358979323846;
    const double Jdelta = 0.22; // FIXME : demander à l'utilisateur de rentrer la valeur

    double angularSpeed_a, angularSpeed_b;
    double ta_average, tb_average;
    double angularAcceleration;
    double couple, power;

    QVector<QPointF> powerPoints;
    QVector<QPointF> couplePoints;

    /* ---------------------------------------------------------------------- *
     *                           ωa = 2π / (t2 - t1)                          *
     * ---------------------------------------------------------------------- *
     * ωa = Première vitesse angulaire (rad/s)                                *
     * Π  = Pi, constante qui vaut 3.141592653589793...                       *
     * tx = temps à l'instant x (s) ave t2 > t1                               *
     * ---------------------------------------------------------------------- */

    angularSpeed_b = (2 * PI) / (inertieTimes.at(1) - inertieTimes.at(0));

    for (int i(2); i < inertieTimes.count(); ++i)
    {
        angularSpeed_a = angularSpeed_b;

    /* ---------------------------------------------------------------------- *
     *                           ωb = 2π / (t3 - t2)                          *
     * ---------------------------------------------------------------------- *
     * ωb = Deuxième vitesse angulaire (rad/s)                                *
     * Π  = Pi, constante qui vaut 3.141592653589793...                       *
     * tx = temps à l'instant x (s) ave t2 > t1                               *
     * ---------------------------------------------------------------------- */

        angularSpeed_b = (2 * PI) / (inertieTimes.at(i) - inertieTimes.at(i-1));

    /* ---------------------------------------------------------------------- *
     *                        ta_moyen = (t1 + t2) / 2                        *
     *                        tb_moyen = (t2 + t3) / 2                        *
     *                   α = (ωb - ωa) / (tb_moyen - ta_moyen)                *
     * ---------------------------------------------------------------------- *
     * α  = Accélération angulaire (rad/s²)                                   *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * tx = temps x (s)                                                       *
     * ---------------------------------------------------------------------- */

        //accAngulaire = (wb - wa) / tb;

        ta_average = (inertieTimes.at(i - 2) + inertieTimes.at(i - 1)) / 2;
        tb_average = (inertieTimes.at(i - 1) + inertieTimes.at(i)) / 2;

        angularAcceleration = (angularSpeed_b - angularSpeed_a)
                                              /
                                  (tb_average - ta_average);

    /* ---------------------------------------------------------------------- *
     *                              C = JΔ * α                                *
     * ---------------------------------------------------------------------- *
     * C  = Couple (N.m)                                                      *
     * JΔ = moment d'inertie (kg.m²)                                          *
     * α  = Accélération angulaire (rad/s²)                                   *
     * ---------------------------------------------------------------------- */

        couple = Jdelta * angularAcceleration;

    /* ---------------------------------------------------------------------- *
     *                               P = C * ωb                               *
     * ---------------------------------------------------------------------- *
     * P  = Puissance (Watts)                                                 *
     * ωx = Vitesse angulaire à l'instant x (rad/s)                           *
     * ---------------------------------------------------------------------- */

        power = couple * angularSpeed_b;

    /* ---------------------------------------------------------------------- *
     *                   Calcul de la masse de carburant                      *
     * ---------------------------------------------------------------------- */


    /* ---------------------------------------------------------------------- *
     *               ωx = (π * Nx) / 30  <=> Nx = (30 * ωx) / π               *
     * ---------------------------------------------------------------------- *
     * ω = Vitesse angulaire (rad/s)                                          *
     * Π = Pi, constante qui vaut 3.141592653589793...                        *
     * N = tours par minute == RPM (tours/minute)                             *
     * ---------------------------------------------------------------------- */

            double rpm_b = (30 * angularSpeed_b) / PI;

            // create curves coordinates
            powerPoints.append(QPointF(rpm_b, power));
            couplePoints.append(QPointF(rpm_b, couple));
    }

    // Create power curve
    QwtPointSeriesData* powerSerieData = new QwtPointSeriesData(powerPoints);
    PlotCurve* powerCurve = new PlotCurve(tr("Puissance"), QPen(Qt::darkBlue)); // TODO : ajouter le nom de l'essai (par défaut, le nom du dossier)
    powerCurve->setData(powerSerieData);
    powerCurve->setAxes(Plot::xTop, Plot::yRight);
    powerCurve->attach(this->couplePowerPlot);
    this->setPlotCurveVisibile(powerCurve, true);

    // Create couple curve
    QwtPointSeriesData* coupleSerieData = new QwtPointSeriesData(couplePoints);
    PlotCurve* coupleCurve = new PlotCurve(tr("Couple"), QPen(Qt::darkRed)); // TODO : ajouter le nom de l'essai (par défaut, le nom du dossier)
    coupleCurve->setData(coupleSerieData);
    coupleCurve->attach(this->couplePowerPlot);
    this->setPlotCurveVisibile(coupleCurve, true);

    // Zoom on the biggest curve
    this->couplePowerPlot->zoom(powerCurve);
}

void MainWindow::on_actionImportData_triggered(void)
{
    QString dirPath = QFileDialog::getExistingDirectory(
                      this, tr("Sélectionnez le dossier contenant "
                      "les données du Megasquirt"), QDir::homePath());

    if (dirPath.isEmpty()) // User canceled
        return;

    QSettings settings;
    settings.beginGroup("files");

    try
    {
        // Check if the folder contents all necessary data files
        QDir MSDir(dirPath);
        this->checkFolderContent(MSDir);

        // Set import parameters
        MSDataParameterDialog importParamDial(MSDir.dirName(), this);
        if (importParamDial.exec() == QDialog::Rejected)
            return;

        QString msCSVFilePath = MSDir.filePath(
                    settings.value(KEY_MEGASQUIRT_CSV).toString());

        // Generate csv file by extracting needed data from dat file
        QStringList megasquirtParameters;
        megasquirtParameters << "pulseWidth1" << "rpm" << "batteryVoltage";

        MSManager megasquirtManager;
        megasquirtManager.datToCSV
                (
                  MSDir.filePath(settings.value(KEY_MEGASQUIRT_DAT).toString()),
                  msCSVFilePath,
                  megasquirtParameters
                );

        // Create couple and power curves
        QString inertieFilePath = MSDir.filePath(
                    settings.value(KEY_INERTIE).toString());
        this->createCoupleAndPowerCurves(inertieFilePath, msCSVFilePath);
    }
    catch(QException const& ex)
    {
        QMessageBox::warning(this, tr("Importation annulée"), ex.what());
    }

    settings.endGroup();
}

QVector<double> MainWindow::getTimesFromCSV(QString const& csvFilePath) const
{
    QFile file(csvFilePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        throw QException(QObject::tr("Impossible d'ouvrir le fichier ")
                         + csvFilePath);

    // Read the file line-by-line and covert time value into seconds
    QVector<double> timeValues;
    while(!file.atEnd())
        timeValues.append(QString(file.readLine()).toDouble() / 1000000);
    file.close();

    // Remove wrong values (first ones)
    for (int i(0); i < 3; ++i)
        timeValues.pop_front();

    // We need at least 3 values of time
    if (timeValues.count() < 3)
        throw QException(QObject::tr("Le fichier ") + csvFilePath +
                         QObject::tr(" ne contient pas assez de valeurs"));

    return timeValues;
}

void MainWindow::checkFolderContent(const QDir &MSDir) const
{
    if (!MSDir.exists())
        throw QException(tr("Le dossier n'existe pas"));

    // Get all file names from settings
    QSettings settings;
    settings.beginGroup("files");

    QStringList fileNames;
    fileNames << settings.value(KEY_INERTIE).toString()
              << settings.value(KEY_PROTOWHEEL).toString()
              << settings.value(KEY_MEGASQUIRT_DAT).toString();

    settings.endGroup();

    // Check if the folder content all the files
    foreach (QString filename, fileNames)
        if(!MSDir.exists(filename))
            throw QException(tr("Fichier ") + filename + tr(" inexistant"));
}


#ifndef __DOUBLEYAXISPLOT_HPP__
#define __DOUBLEYAXISPLOT_HPP__

#include "Plot.hpp"
#include "Zoomer.hpp"
#include <qwt_plot_rescaler.h>

class DoubleYAxisPlot : public Plot
{
    Q_OBJECT

    public:

        explicit DoubleYAxisPlot(QString const& title, double aspectRatio,
                                 QWidget* parent = NULL);
        explicit DoubleYAxisPlot(QwtText const& title, double aspectRatio,
                                 QWidget* parent = NULL);

        virtual ~DoubleYAxisPlot(void);

        virtual void zoom(QwtPlotItem const* item);

    protected:

        double  _ratio;
        Zoomer* _yRightZoomer;
        QwtPlotRescaler* _yRescaler;
};

#endif /* __DOUBLEYAXISPLOT_HPP__ */


#include "DoubleYAxisPlot.hpp"

DoubleYAxisPlot::DoubleYAxisPlot(const QString& title, double aspectRatio,
                                 QWidget* parent) :
    DoubleYAxisPlot(QwtText(title), aspectRatio, parent)
{
    // Delegating constructors only available with -std=c++11 or -std=gnu++11
}

DoubleYAxisPlot::DoubleYAxisPlot(const QwtText& title, double aspectRatio,
                                 QWidget* parent) :
    Plot(title, parent), _ratio(aspectRatio), _yRightZoomer(NULL), _yRescaler(NULL)
{
    /* ---------------------------------------------------------------------- *
     *                        Add a y axis on the right                       *
     * ---------------------------------------------------------------------- *
     * A zoomer controls only one x and one y axis. If you want to zoom 2 y   *
     * axis you need a second zoomer (without tracker and rubber band)        *
     * ---------------------------------------------------------------------- */
    this->enableAxis(yRight);
    //this->enableAxis(xTop);

    // Zoomer for the new axis
    this->_yRightZoomer = new Zoomer(xTop, yRight, this->canvas());

    /* ---------------------------------------------------------------------- *
     *       Rescaler takes care of fixed aspect ratios for plot scales       *
     * ---------------------------------------------------------------------- */
    this->_yRescaler = new QwtPlotRescaler(this->canvas());
    this->_yRescaler->setReferenceAxis(yLeft);
    this->_yRescaler->setAspectRatio(yRight, this->_ratio);
    this->_yRescaler->setAspectRatio(xBottom, 0.0);
    this->_yRescaler->setAspectRatio(xTop, 0.0);
}

DoubleYAxisPlot::~DoubleYAxisPlot(void)
{
    qDebug() << "DoubleYAxisPlot (" << this->objectName() << ") Début destructeur";

    delete this->_yRightZoomer;
    delete this->_yRescaler;

    qDebug() << "DoubleYAxisPlot (" << this->objectName() << ") Fin destructeur";
}

void DoubleYAxisPlot::zoom(const QwtPlotItem* item)
{
    QRectF rect(item->boundingRect());
    QPointF topLeft(rect.topLeft());
    QPointF bottomRight(rect.bottomRight());

    if (item->yAxis() == yLeft)
    {
        this->_xBottomYLeftZoomer->zoom(rect);

        topLeft.setY(topLeft.y() / this->_ratio);
        bottomRight.setY(bottomRight.y() / this->_ratio);
        this->_yRightZoomer->zoom(QRectF(topLeft, bottomRight));
    }
    else
    {
        this->_yRightZoomer->zoom(rect);

        topLeft.setY(topLeft.y() * this->_ratio);
        bottomRight.setY(bottomRight.y() * this->_ratio);
        this->_xBottomYLeftZoomer->zoom(QRectF(topLeft, bottomRight));
    }

    //this->_magnifier->restoreScale();
}
